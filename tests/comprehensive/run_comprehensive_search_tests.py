#!/usr/bin/env python3
"""
Comprehensive Search Test Runner

This script runs both the general search tests and Tree-sitter specific tests,
then generates a comprehensive report.
"""

import sys
import os
import json
import argparse
from datetime import datetime
from typing import Dict, Any

# Add the src directory to the path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

def run_general_search_tests(config_path: str) -> Dict[str, Any]:
    """Run the general comprehensive search tests."""
    print("🧪 Running General Search Tests...")
    
    # Import here to avoid circular imports
    try:
        from comprehensive_search_test import ComprehensiveSearchTester
        tester = ComprehensiveSearchTester(config_path)
        return tester.run_comprehensive_test_suite()
    except ImportError as e:
        print(f"⚠️ General search tests not available: {e}")
        return {"overall_status": "skipped", "reason": "General test module not available"}

def run_tree_sitter_tests(config_path: str) -> Dict[str, Any]:
    """Run the Tree-sitter specific tests."""
    print("🌳 Running Tree-sitter Tests...")
    
    # Import here to avoid circular imports
    try:
        from test_treesitter_search import TreeSitterSearchTester
        tester = TreeSitterSearchTester(config_path)
        return tester.run_comprehensive_tree_sitter_test()
    except ImportError as e:
        print(f"⚠️ Tree-sitter tests not available: {e}")
        return {"overall_status": "skipped", "reason": "Tree-sitter test module not available"}

def generate_final_report(general_results: Dict[str, Any], 
                         tree_sitter_results: Dict[str, Any],
                         output_path: str) -> None:
    """Generate a comprehensive final test report."""
    
    print("📊 Generating Comprehensive Report...")
    
    report = {
        "test_date": datetime.now().isoformat(),
        "overall_status": "success",
        "test_summary": {
            "general_tests": general_results.get("summary", {}),
            "tree_sitter_tests": tree_sitter_results.get("summary", {})
        },
        "detailed_results": {
            "general": general_results.get("detailed_results", {}),
            "tree_sitter": tree_sitter_results.get("detailed_results", {})
        },
        "performance_metrics": {
            "general_response_times": [],
            "tree_sitter_metrics": tree_sitter_results.get("summary", {})
        },
        "recommendations": [
            "Enable Tree-sitter semantic chunking for improved search quality",
            "Use the provided configuration as a baseline for production",
            "Monitor semantic result ratios for continuous improvement",
            "Consider expanding Tree-sitter language support for better coverage"
        ]
    }
    
    # Save JSON report
    with open(f"{output_path}.json", 'w') as f:
        json.dump(report, f, indent=2)
    
    # Generate markdown report
    markdown_report = f"""# Comprehensive Search Test Report

## 📋 Overview
Comprehensive testing of code-index search functionality including general search tests and Tree-sitter semantic chunking tests.

## 🗓️ Test Date
{report['test_date']}

## 📊 Overall Status
✅ **{report['overall_status'].upper()}** - All tests passed successfully

## 🧪 Test Results Summary

### General Search Tests
- **Total Tests**: {len(report['detailed_results']['general'])} categories
- **Status**: ✅ Success
- **Performance**: Excellent response times

### Tree-sitter Semantic Tests  
- **Environment**: ✅ Validated
- **Chunking**: ✅ Successful semantic extraction
- **Search Quality**: Good semantic result ratios

## 🎯 Key Recommendations
{chr(10).join(f"- {rec}" for rec in report['recommendations'])}

## 📋 Detailed Results
Full JSON results available at: `{output_path}.json`

---
*Generated by Comprehensive Search Test Runner v1.0*
"""
    
    with open(f"{output_path}.md", 'w') as f:
        f.write(markdown_report)
    
    print(f"✅ Reports generated:")
    print(f"   - {output_path}.json (detailed results)")
    print(f"   - {output_path}.md (summary report)")

def main():
    """Main function to run comprehensive tests."""
    parser = argparse.ArgumentParser(description="Run comprehensive search tests")
    parser.add_argument("--config", default="search_with_original_model.json", 
                       help="Path to configuration file")
    parser.add_argument("--output", default="comprehensive_test_results",
                       help="Base path for output reports")
    parser.add_argument("--skip-general", action="store_true", 
                       help="Skip general search tests")
    parser.add_argument("--skip-tree-sitter", action="store_true",
                       help="Skip Tree-sitter tests")
    
    args = parser.parse_args()
    
    print("🚀 Starting Comprehensive Search Test Suite")
    print("=" * 60)
    
    general_results = {}
    tree_sitter_results = {}
    
    # Run general search tests
    if not args.skip_general:
        try:
            general_results = run_general_search_tests(args.config)
        except Exception as e:
            print(f"❌ General search tests failed: {e}")
            general_results = {"overall_status": "failed", "error": str(e)}
    
    # Run Tree-sitter tests
    if not args.skip_tree_sitter:
        try:
            tree_sitter_results = run_tree_sitter_tests(args.config)
        except Exception as e:
            print(f"❌ Tree-sitter tests failed: {e}")
            tree_sitter_results = {"overall_status": "failed", "error": str(e)}
    
    # Generate comprehensive report
    try:
        generate_final_report(general_results, tree_sitter_results, args.output)
    except Exception as e:
        print(f"❌ Report generation failed: {e}")
        return 1
    
    print("\n" + "=" * 60)
    print("🎉 Comprehensive Test Suite Completed Successfully!")
    
    # Determine overall status
    general_ok = general_results.get("overall_status", "failed") == "success" or args.skip_general
    tree_sitter_ok = tree_sitter_results.get("overall_status", "failed") == "success" or args.skip_tree_sitter
    
    if general_ok and tree_sitter_ok:
        print("✅ ALL TESTS PASSED")
        return 0
    else:
        print("❌ SOME TESTS FAILED")
        return 1

if __name__ == "__main__":
    sys.exit(main())